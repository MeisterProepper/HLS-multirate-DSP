// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="HLS_FIR_HLS_FIR,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.474000,HLS_SYN_LAT=797,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=195,HLS_SYN_LUT=346,HLS_VERSION=2024_2}" *)

module HLS_FIR (
        ap_clk,
        ap_rst_n,
        input_r_TDATA,
        input_r_TVALID,
        input_r_TREADY,
        output_r_TDATA,
        output_r_TVALID,
        output_r_TREADY
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst_n;
input  [15:0] input_r_TDATA;
input   input_r_TVALID;
output   input_r_TREADY;
output  [15:0] output_r_TDATA;
output   output_r_TVALID;
input   output_r_TREADY;

 reg    ap_rst_n_inv;
reg    input_r_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    output_r_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg   [15:0] test_reg_60;
wire   [15:0] grp_FIR_filter_392_s_fu_49_ap_return;
wire    grp_FIR_filter_392_s_fu_49_ap_start;
wire    grp_FIR_filter_392_s_fu_49_ap_done;
wire    grp_FIR_filter_392_s_fu_49_ap_idle;
wire    grp_FIR_filter_392_s_fu_49_ap_ready;
reg    grp_FIR_filter_392_s_fu_49_ap_start_reg;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    regslice_both_output_r_U_apdone_blk;
reg    ap_block_state3;
wire    regslice_both_input_r_U_apdone_blk;
wire   [15:0] input_r_TDATA_int_regslice;
wire    input_r_TVALID_int_regslice;
reg    input_r_TREADY_int_regslice;
wire    regslice_both_input_r_U_ack_in;
reg    output_r_TVALID_int_regslice;
wire    output_r_TREADY_int_regslice;
wire    regslice_both_output_r_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 grp_FIR_filter_392_s_fu_49_ap_start_reg = 1'b0;
end

HLS_FIR_FIR_filter_392_s grp_FIR_filter_392_s_fu_49(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_FIR_filter_392_s_fu_49_ap_start),
    .ap_done(grp_FIR_filter_392_s_fu_49_ap_done),
    .ap_idle(grp_FIR_filter_392_s_fu_49_ap_idle),
    .ap_ready(grp_FIR_filter_392_s_fu_49_ap_ready),
    .x_n(test_reg_60),
    .ap_return(grp_FIR_filter_392_s_fu_49_ap_return)
);

HLS_FIR_regslice_both #(
    .DataWidth( 16 ))
regslice_both_input_r_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TDATA),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_U_ack_in),
    .data_out(input_r_TDATA_int_regslice),
    .vld_out(input_r_TVALID_int_regslice),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_U_apdone_blk)
);

HLS_FIR_regslice_both #(
    .DataWidth( 16 ))
regslice_both_output_r_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_FIR_filter_392_s_fu_49_ap_return),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(output_r_TREADY_int_regslice),
    .data_out(output_r_TDATA),
    .vld_out(regslice_both_output_r_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_FIR_filter_392_s_fu_49_ap_start_reg <= 1'b0;
    end else begin
        if (((input_r_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_FIR_filter_392_s_fu_49_ap_start_reg <= 1'b1;
        end else if ((grp_FIR_filter_392_s_fu_49_ap_ready == 1'b1)) begin
            grp_FIR_filter_392_s_fu_49_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        test_reg_60 <= input_r_TDATA_int_regslice;
    end
end

always @ (*) begin
    if ((input_r_TVALID_int_regslice == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((output_r_TREADY_int_regslice == 1'b0) | (grp_FIR_filter_392_s_fu_49_ap_done == 1'b0))) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state3)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        input_r_TDATA_blk_n = input_r_TVALID_int_regslice;
    end else begin
        input_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((input_r_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        input_r_TREADY_int_regslice = 1'b1;
    end else begin
        input_r_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        output_r_TDATA_blk_n = output_r_TREADY_int_regslice;
    end else begin
        output_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((output_r_TREADY_int_regslice == 1'b0) | (grp_FIR_filter_392_s_fu_49_ap_done == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        output_r_TVALID_int_regslice = 1'b1;
    end else begin
        output_r_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((input_r_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((output_r_TREADY_int_regslice == 1'b0) | (grp_FIR_filter_392_s_fu_49_ap_done == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state3 = ((output_r_TREADY_int_regslice == 1'b0) | (regslice_both_output_r_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_FIR_filter_392_s_fu_49_ap_start = grp_FIR_filter_392_s_fu_49_ap_start_reg;

assign input_r_TREADY = regslice_both_input_r_U_ack_in;

assign output_r_TVALID = regslice_both_output_r_U_vld_out;

endmodule //HLS_FIR
