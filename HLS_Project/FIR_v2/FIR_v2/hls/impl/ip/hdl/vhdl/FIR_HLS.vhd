-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FIR_HLS is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    input_r_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_TVALID : IN STD_LOGIC;
    input_r_TREADY : OUT STD_LOGIC;
    output_r_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_r_TVALID : OUT STD_LOGIC;
    output_r_TREADY : IN STD_LOGIC );
end;


architecture behav of FIR_HLS is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "FIR_HLS_FIR_HLS,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.473313,HLS_SYN_LAT=8,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=11599,HLS_SYN_LUT=8355,HLS_VERSION=2024_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;

    signal ap_rst_n_inv : STD_LOGIC;
    signal input_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal output_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_FIR_filter_fu_827_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_FIR_filter_fu_827_ap_start : STD_LOGIC;
    signal grp_FIR_filter_fu_827_ap_done : STD_LOGIC;
    signal grp_FIR_filter_fu_827_ap_idle : STD_LOGIC;
    signal grp_FIR_filter_fu_827_ap_ready : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal regslice_both_output_r_U_apdone_blk : STD_LOGIC;
    signal ap_block_state9 : BOOLEAN;
    signal regslice_both_input_r_U_apdone_blk : STD_LOGIC;
    signal input_r_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal input_r_TVALID_int_regslice : STD_LOGIC;
    signal input_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_input_r_U_ack_in : STD_LOGIC;
    signal output_r_TVALID_int_regslice : STD_LOGIC;
    signal output_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_output_r_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component FIR_HLS_FIR_filter IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_n : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component FIR_HLS_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_FIR_filter_fu_827 : component FIR_HLS_FIR_filter
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_FIR_filter_fu_827_ap_start,
        ap_done => grp_FIR_filter_fu_827_ap_done,
        ap_idle => grp_FIR_filter_fu_827_ap_idle,
        ap_ready => grp_FIR_filter_fu_827_ap_ready,
        x_n => input_r_TDATA_int_regslice,
        ap_return => grp_FIR_filter_fu_827_ap_return);

    regslice_both_input_r_U : component FIR_HLS_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TDATA,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_U_ack_in,
        data_out => input_r_TDATA_int_regslice,
        vld_out => input_r_TVALID_int_regslice,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_U_apdone_blk);

    regslice_both_output_r_U : component FIR_HLS_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_FIR_filter_fu_827_ap_return,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => output_r_TREADY_int_regslice,
        data_out => output_r_TDATA,
        vld_out => regslice_both_output_r_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_block_state9, input_r_TVALID_int_regslice, output_r_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (input_r_TVALID_int_regslice = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (output_r_TREADY_int_regslice = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state1_blk_assign_proc : process(input_r_TVALID_int_regslice)
    begin
        if ((input_r_TVALID_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(output_r_TREADY_int_regslice)
    begin
        if ((output_r_TREADY_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state9_blk_assign_proc : process(ap_block_state9)
    begin
        if ((ap_const_boolean_1 = ap_block_state9)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state9_assign_proc : process(regslice_both_output_r_U_apdone_blk, output_r_TREADY_int_regslice)
    begin
                ap_block_state9 <= ((output_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_output_r_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    grp_FIR_filter_fu_827_ap_start_assign_proc : process(ap_CS_fsm_state1, input_r_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (input_r_TVALID_int_regslice = ap_const_logic_1))) then 
            grp_FIR_filter_fu_827_ap_start <= ap_const_logic_1;
        else 
            grp_FIR_filter_fu_827_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    input_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, input_r_TVALID_int_regslice)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            input_r_TDATA_blk_n <= input_r_TVALID_int_regslice;
        else 
            input_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    input_r_TREADY <= regslice_both_input_r_U_ack_in;

    input_r_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state1, input_r_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (input_r_TVALID_int_regslice = ap_const_logic_1))) then 
            input_r_TREADY_int_regslice <= ap_const_logic_1;
        else 
            input_r_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    output_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, output_r_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            output_r_TDATA_blk_n <= output_r_TREADY_int_regslice;
        else 
            output_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_r_TVALID <= regslice_both_output_r_U_vld_out;

    output_r_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state8, output_r_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (output_r_TREADY_int_regslice = ap_const_logic_1))) then 
            output_r_TVALID_int_regslice <= ap_const_logic_1;
        else 
            output_r_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

end behav;
