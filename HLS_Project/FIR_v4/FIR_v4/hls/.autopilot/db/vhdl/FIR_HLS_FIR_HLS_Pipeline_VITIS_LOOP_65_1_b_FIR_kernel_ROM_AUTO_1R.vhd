-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity FIR_HLS_FIR_HLS_Pipeline_VITIS_LOOP_65_1_b_FIR_kernel_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 16; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 117
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of FIR_HLS_FIR_HLS_Pipeline_VITIS_LOOP_65_1_b_FIR_kernel_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0000000000111111", 1 => "1111111110011000", 2 => "1111111111111111", 3 => "0000000000100111", 
    4 => "1111111111110001", 5 => "1111111111001001", 6 => "0000000000001100", 7 => "0000000000111000", 
    8 => "1111111111101001", 9 => "1111111111000000", 10 => "0000000000100000", 11 => "0000000001000101", 
    12 => "1111111111010010", 13 => "1111111110110110", 14 => "0000000000111110", 15 => "0000000001001101", 
    16 => "1111111110110000", 17 => "1111111110110010", 18 => "0000000001100101", 19 => "0000000001001101", 
    20 => "1111111110000100", 21 => "1111111110111000", 22 => "0000000010010101", 23 => "0000000000111111", 
    24 => "1111111101010000", 25 => "1111111111001110", 26 => "0000000011001101", 27 => "0000000000100000", 
    28 => "1111111100010101", 29 => "1111111111111000", 30 => "0000000100001011", 31 => "1111111111101010", 
    32 => "1111111011010110", 33 => "0000000000111101", 34 => "0000000101001010", 35 => "1111111110010100", 
    36 => "1111111010010110", 37 => "0000000010100110", 38 => "0000000110001010", 39 => "1111111100010100", 
    40 => "1111111001011000", 41 => "0000000101000011", 42 => "0000000111000100", 43 => "1111111001010010", 
    44 => "1111111000100010", 45 => "0000001000110101", 46 => "0000000111110110", 47 => "1111110100011010", 
    48 => "1111110111110101", 49 => "0000001111011010", 50 => "0000001000011101", 51 => "1111101010110110", 
    52 => "1111110111010101", 53 => "0000011111000011", 54 => "0000001000110101", 55 => "1111001010100111", 
    56 => "1111110111000101", 57 => "0010100010101010", 58 => "0100001000111101", 59 => "0010100010101010", 
    60 => "1111110111000101", 61 => "1111001010100111", 62 => "0000001000110101", 63 => "0000011111000011", 
    64 => "1111110111010101", 65 => "1111101010110110", 66 => "0000001000011101", 67 => "0000001111011010", 
    68 => "1111110111110101", 69 => "1111110100011010", 70 => "0000000111110110", 71 => "0000001000110101", 
    72 => "1111111000100010", 73 => "1111111001010010", 74 => "0000000111000100", 75 => "0000000101000011", 
    76 => "1111111001011000", 77 => "1111111100010100", 78 => "0000000110001010", 79 => "0000000010100110", 
    80 => "1111111010010110", 81 => "1111111110010100", 82 => "0000000101001010", 83 => "0000000000111101", 
    84 => "1111111011010110", 85 => "1111111111101010", 86 => "0000000100001011", 87 => "1111111111111000", 
    88 => "1111111100010101", 89 => "0000000000100000", 90 => "0000000011001101", 91 => "1111111111001110", 
    92 => "1111111101010000", 93 => "0000000000111111", 94 => "0000000010010101", 95 => "1111111110111000", 
    96 => "1111111110000100", 97 => "0000000001001101", 98 => "0000000001100101", 99 => "1111111110110010", 
    100 => "1111111110110000", 101 => "0000000001001101", 102 => "0000000000111110", 103 => "1111111110110110", 
    104 => "1111111111010010", 105 => "0000000001000101", 106 => "0000000000100000", 107 => "1111111111000000", 
    108 => "1111111111101001", 109 => "0000000000111000", 110 => "0000000000001100", 111 => "1111111111001001", 
    112 => "1111111111110001", 113 => "0000000000100111", 114 => "1111111111111111", 115 => "1111111110011000", 
    116 => "0000000000111111");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

